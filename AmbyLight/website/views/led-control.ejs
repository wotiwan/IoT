<div class="container main-content">
  <div class="card fade-in">
    <h2 class="card-title">Настройка ленты <%= strip.code %></h2>

    <form action="/update-led-strip" method="POST" class="led-control-form" id="led-form">
      <input type="hidden" name="code" value="<%= strip.code %>">

      <div class="form-group">
        <label for="is_on" class="form-label">Лента</label>
        <label class="switch">
          <input
            type="checkbox"
            id="is_on"
            name="is_on"
            value="1"
            <%= strip.is_on == 1 ? 'checked' : '' %>
            onchange="toggleControls()"
          >
          <span class="slider round"></span>
        </label>
      </div>

      <div id="controls" style="<%= strip.is_on == 1 ? '' : 'display:none;' %>">
        <div class="form-group">
          <label for="mode" class="form-label">Режим</label>
          <select name="mode" id="mode" class="form-control" onchange="toggleColorPicker()">
            <option value="auto" <%= strip.mode === 'auto' ? 'selected' : '' %>>Эмбиент</option>
            <option value="manual" <%= strip.mode === 'manual' ? 'selected' : '' %>>Ручной</option>
            <option value="weather" <%= strip.mode === 'weather' ? 'selected' : '' %>>Погода</option>
            <option value="rainbow" <%= strip.mode === 'rainbow' ? 'selected' : '' %>>Радуга</option>
            <option value="gradient" <%= strip.mode === 'gradient' ? 'selected' : '' %>>Градиент</option>
            <option value="star" <%= strip.mode === 'star' ? 'selected' : '' %>>Звезда</option>
          </select>
        </div>

        <div class="form-group" id="color-picker" style="<%= strip.mode === 'manual' ? '' : 'display:none;' %>">
          <label for="color" class="form-label">Цвет</label>
          <input type="color" id="color" name="color" value="<%= strip.color %>">
        </div>

        
        <div class="form-group">
          <label for="direction" class="form-label">Направление</label>
          <select name="direction" id="direction" class="form-control">
            <option value="right" <%= strip.direction === 'right' ? 'selected' : '' %>>Вправо</option>
            <option value="left"  <%= strip.direction === 'left'  ? 'selected' : '' %>>Влево</option>
          </select>
        </div>

        <div class="form-group">
          <label class="form-label">
            Яркость: <span id="brightness-val"><%= strip.brightness %></span>
            <button type="button" class="btn btn-secondary btn-sm" onclick="toggleSlider('brightness')">Изменить</button>
          </label>
          <div id="brightness-container" style="display: none; margin-top: 8px; margin-bottom: 16px;">
            <input type="range" id="brightness" name="brightness" min="0" max="100" step="1" value="<%= strip.brightness %>" class="form-control" style="width: 70%; display: inline-block;">
            <button type="button" class="btn btn-success btn-primary btn-sm" onclick="saveSingleSetting('brightness')">Сохранить</button>
          </div>
        </div>

        <div class="form-group">
          <label class="form-label">
            Скорость: <span id="speed-val"><%= strip.speed %></span>
            <button type="button" class="btn btn-secondary btn-sm" onclick="toggleSlider('speed')">Изменить</button>
          </label>
          <div id="speed-container" style="display: none; margin-top: 8px; margin-bottom: 16px;">
            <input type="range" id="speed" name="speed" min="1" max="10" step="1" value="<%= strip.speed %>" class="form-control" style="width: 70%; display: inline-block;">
            <button type="button" class="btn btn-success btn-primary btn-sm" onclick="saveSingleSetting('speed')">Сохранить</button>
          </div>
        </div>

        <div class="form-group">
          <label class="form-label">
            Ширина (кол-во светодиодов): <span id="width-val"><%= strip.width %></span>
          </label>
          <input type="number" id="width" name="width" min="0" value="<%= strip.width %>" class="form-control" style="width: 30%; display: inline-block;">
          <button type="button" class="btn btn-success btn-sm" onclick="saveWidth()">Сохранить ширину</button>
        </div>

        <div class="form-group">
          <label class="form-label">
            Высота (кол-во светодиодов): <span id="height-val"><%= strip.height %></span>
          </label>
          <input type="number" id="height" name="height" min="0" value="<%= strip.height %>" class="form-control" style="width: 30%; display: inline-block;">
          <button type="button" class="btn btn-success btn-sm" onclick="saveHeight()">Сохранить высоту</button>
        </div>
      </div>

      <button type="submit" class="btn btn-primary mt-20">Сохранить все</button>
      <a href="/account" class="btn btn-outline btn-sm">← Вернуться на главную</a>
    </form>
  </div>
</div>

<script>
  function toggleControls() {
    const isOn = document.getElementById("is_on").checked;
    document.getElementById("controls").style.display = isOn ? "block" : "none";
  }

  function toggleColorPicker() {
    const mode = document.getElementById("mode").value;
    document.getElementById("color-picker").style.display = mode === "manual" ? "block" : "none";
  }

  function toggleSlider(type) {
    const container = document.getElementById(`${type}-container`);
    container.style.display = container.style.display === "none" ? "block" : "none";
  }

  function getCode() {
    return document.querySelector("input[name='code']").value;
  }

  function saveSingleSetting(type) {
    const code = getCode();
    let value;

    if (type === "brightness") {
      value = Math.round(document.getElementById("brightness").value);
    } else if (type === "speed") {
      value = parseInt(document.getElementById("speed").value, 10);
    } else {
      console.error("Неизвестный параметр для сохранения");
      return;
    }

    fetch("/update-led-parameter", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ code, parameter: type, value })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        document.getElementById(`${type}-val`).textContent = value;
        document.getElementById(`${type}-container`).style.display = "none";
      } else {
        throw new Error(data.detail || "Ошибка");
      }
    })
    .catch(err => {
      console.error(err);
      alert("Ошибка при сохранении параметра");
    });

    fetch(`http://176.117.244.160:8000/${type}/${value}`, { method: "GET", keepalive: true })
      .catch(err => console.error(`Ошибка при запросе ${type}:`, err));
  }

function saveWidth() {
    const code = getCode();
    const width = parseInt(document.getElementById("width").value, 10);
    if (isNaN(width)) {
      alert("Введите корректную ширину");
      return;
    }

    fetch("/update-led-parameter", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ code, parameter: "width", value: width })
    })
    .then(res => res.json())
    .then(data => {
      if (!data.success) {
        alert("Ошибка при сохранении ширины в базе");
        throw new Error("DB error");
      }
      document.getElementById("width-val").textContent = width;
      const mac = encodeURIComponent(code);
      return fetch(`http://176.117.244.160:8000/update_cnfg/${mac}/width/${width}`, {
        method: "GET",
        keepalive: true
      });
    })
    .then(res => {
      if (!res.ok) console.warn("FastAPI config update error", res.status);
    })
    .catch(err => {
      console.error(err);
    });
  }

  function saveHeight() {
    const code = getCode();
    const height = parseInt(document.getElementById("height").value, 10);
    if (isNaN(height)) {
      alert("Введите корректную высоту");
      return;
    }

    fetch("/update-led-parameter", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ code, parameter: "height", value: height })
    })
    .then(res => res.json())
    .then(data => {
      if (!data.success) {
        alert("Ошибка при сохранении высоты в базе");
        throw new Error("DB error");
      }
      document.getElementById("height-val").textContent = height;
      const mac = encodeURIComponent(code);
      return fetch(`http://176.117.244.160:8000/update_cnfg/${mac}/height/${height}`, {
        method: "GET",
        keepalive: true
      });
    })
    .then(res => {
      if (!res.ok) console.warn("FastAPI config update error", res.status);
    })
    .catch(err => {
      console.error(err);
    });
  }

  function saveDirection() {
    const code = getCode();
    fetch("/update-led-parameter", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ code, parameter: "height", value: height })
    })
    .then(res => res.json())
    .then(data => {
      if (!data.success) {
        alert("Ошибка при сохранении высоты в базе");
        throw new Error("DB error");
      }
      const dir  = document.getElementById("direction").value;
      const mac = encodeURIComponent(code);
      return fetch(`http://176.117.244.160:8000/direction/${mac}/${dir}`, {
        method: "GET",
        keepalive: true
      });
    })
    .then(res => {
      if (!res.ok) console.warn("FastAPI config update error", res.status);
    })
    .catch(err => {
      console.error(err);
    });
  }


  async function sendModeRequest() {
    const code = getCode();
    const isOn = document.getElementById("is_on").checked;
    const mode = document.getElementById("mode").value;
    const colorHex = document.getElementById("color").value;
    let url;

    if (!isOn) {
      url = "http://176.117.244.160:8000/off";
    } else {
      switch (mode) {
        case "manual":
          const r = parseInt(colorHex.slice(1, 3), 16);
          const g = parseInt(colorHex.slice(3, 5), 16);
          const b = parseInt(colorHex.slice(5, 7), 16);
          url = `http://176.117.244.160:8000/color/${r}/${g}/${b}`;
          break;
        case "auto":
          url = `http://176.117.244.160:8000/ambilight`;
          break;
        case "weather":
          const ipRes = await fetch("https://api.ipify.org?format=json");
          const { ip } = await ipRes.json();
          url = `http://176.117.244.160:8000/weather/${ip}`;
          break;
        case "rainbow":
          url = "http://176.117.244.160:8000/rainbow";
          break;
        case "gradient":
          url = "http://176.117.244.160:8000/gradient";
          break;
        case "star":
          url = "http://176.117.244.160:8000/star_shooting";
          break;
        default:
          console.error("Неизвестный режим:", mode);
          return;
      }
    }

    try {
      await fetch(url, { method: "GET", keepalive: true });
    } catch (err) {
      console.error("Ошибка при основном запросе:", err);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    toggleControls();
    toggleColorPicker();

    document.getElementById("color")?.addEventListener("input", () => {
      toggleColorPicker();
    });

    document.getElementById("is_on").addEventListener("change", toggleControls);
    document.getElementById("mode").addEventListener("change", toggleColorPicker);

    const form = document.getElementById("led-form");
    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        await sendModeRequest();
        form.submit();
      });
    }
  });
</script>
